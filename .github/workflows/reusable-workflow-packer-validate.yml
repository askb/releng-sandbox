---
# reusable-workflow.yml

on:
  workflow_call:
    secrets:
      ENV_SECRETS:
        # yamllint disable-line rule:line-length
        description: "Pass GitHub secrets to be exported as env vars via `toJSON(secrets)` or specific secrets encoded in JSON format"
        required: true

concurrency:
  # yamllint disable-line rule:line-length
  group: reusable-${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  parse-credentials:
    runs-on: ubuntu-latest
    env:
      ENV_SECRETS: ${{ secrets.ENV_SECRETS }}
    steps:
      - name: Decode credentials as environment variables
        shell: bash
        run: |
          set -x

          # for i in $ENV_SECRETS; do
          #   i=$(echo "$i" | sed 's/=.*//g')=$(echo ${i#*=} | base64 -di | base64 -di)
          #   echo ::add-mask::${i#*=}
          #   printf '%s\n' "$i" >> $GITHUB_ENV
          # done

          for kval in $ENV_SECRETS; do
            # extract the key name
            key=$(echo "$kval" | sed 's/=.*//g')
            # extract the value in b64 format
            encoded_val="${kval#*=}"
            # decode the value
            decoded_val="$(echo "$encoded_val" | base64 -di | base64 -di)"
            # construct the entire 'key=value' string
            decoded_kval="$(echo "$key")=$(echo "$decoded_val")"
            # mask to value
            echo ::add-mask::"$decoded_kval"
            # Add to env
            printf '%s<<EOF\n%s\nEOF\n' "$key" "$decoded_kval" >> $GITHUB_ENV
          done

      - name: Validate credentials
        shell: bash
        run: |
          # Secrets are now available as masked environment variable.
          echo "$CLOUDS_ENV_2XB64"
          echo "$CLOUDS_YAML_2XB64"

      - name: Check credentials escape chars if its the same as set/read on repo
        run: |
          set -x
          # Secrets are now available as masked environment variable.
          if [[ ${CLOUDS_ENV_2XB64} != '' ]]; then
              echo "CLOUDS_ENV_2XB64 matches value";
              echo "$CLOUDS_ENV_2XB64"
          fi

          if [[ ${CLOUDS_YAML_2XB64} != '' ]]; then
              echo "CLOUDS_YAML_2XB64 matches value";
              echo "$CLOUDS_YAML_2XB64"
          fi

      - name: Create a file and check
        shell: bash
        run: |
          set -x

          # Secrets are now available as masked environment variable.
          if [[ "$CLOUDS_ENV_2XB64" != '' ]]; then
              clouds_env_b64="$CLOUDS_ENV_2XB64"
              echo "${clouds_env_b64}" | base64 --decode | base64 --decode > "${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl"
              cat "${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl" | base64 --decode | base64 --decode | egrep -v '(password|username)'
          fi

          if [[ "$CLOUDS_YAML_2XB64" != '' ]]; then
              mkdir -p "$HOME/.config/openstack"
              clouds_yaml_b64="$CLOUDS_YAML_2XB64"
              echo "${clouds_yaml_b64}" | base64 --decode | base64 --decode > "$HOME/.config/openstack/clouds.yaml"
              cat "$HOME/.config/openstack/clouds.yaml" | base64 --decode | base64 --decode | egrep -v '(cloud_pass|cloud_user)'
          fi
