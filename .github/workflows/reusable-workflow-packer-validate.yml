---
# reusable-workflow.yml

on:
  workflow_call:
    secrets:
      ENV_SECRETS:
        # yamllint disable-line rule:line-length
        description: "Pass GitHub secrets to be exported as env vars"
        required: true

concurrency:
  # yamllint disable-line rule:line-length
  group: reusable-${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  parse-credentials:
    runs-on: ubuntu-latest
    env:
      JSON_SECRETS: ${{ toJSON(secrets) }}
    # env:
    #   ENV_SECRETS: ${{ secrets.ENV_SECRETS }}
    steps:
      # - name: "Dump json secrets"
      #   shell: bash
      #   # env:
      #   #   JSON_SECRETS: ${{ toJSON(secrets) }}
      #   run: |
      #     echo "$JSON_SECRETS"
      #
      # - name: "Dump tojson secrets and decode credentials as environment variables"
      #   shell: bash
      #   # env:
      #   #   JSON_SECRETS: ${{ toJSON(secrets) }}
      #   run: |
      #     set -x
      #     readarray -t json_secrets < <(echo "$JSON_SECRETS" | jq -c -r '. | keys[] as $k | "\($k)=\(.[$k])"')
      #     for kval in "${json_secrets[@]}"; do
      #       echo "processing key-val: $kval";
      #       # extract the key name
      #       key="${kval%%=*}"
      #       # extract the value in b64 format
      #       encoded_val="${kval#*=}"
      #       # mask to value
      #       echo ::add-mask::"$encoded_val"
      #       # Add to env
      #       # printf '%s<<EOF\n%s\nEOF\n' "$key" "$encoded_val" >> $GITHUB_ENV
      #       printf '%s\n' "$key=$encoded_val" >> $GITHUB_ENV
      #     done

      - name: "Dump secrets"
        shell: bash
        run: |
          echo "$ENV_SECRETS"

      - name: Decode credentials as environment variables
        shell: bash
        run: |
          # set -x

          for kval in "$ENV_SECRETS"; do
            # extract the key name
            # key="$(echo "$kval" | sed 's/=.*//g')"
            key="${kval%%=*}"
            # extract the value in b64 format
            encoded_val="${kval#*=}"
            # decode the value
            # decoded_val="$(echo "$encoded_val" | base64 -di | base64 -di)"
            # construct the entire 'key=value' string
            # decoded_kval="$(echo "$key")=$(echo "$decoded_val")"
            # mask to value
            echo ::add-mask::"$encoded_val"
            # Add to env
            # printf '%s<<EOF\n%s\nEOF\n' "$key" "$decoded_kval" >> $GITHUB_ENV
            printf '%s<<EOF\n%s\nEOF\n' "$key" "$encoded_val" >> $GITHUB_ENV
          done

      - name: Validate credentials
        shell: bash
        run: |
          echo "$CLOUDS_ENV_2XB64"
          echo "$CLOUDS_YAML_2XB64"

      - name: Check credentials escape chars if its the same as set/read on repo
        run: |
          # set -x
          if [[ ${CLOUDS_ENV_2XB64} != '' ]]; then
              echo "CLOUDS_ENV_2XB64 matches value";
              echo "$CLOUDS_ENV_2XB64"
          fi

          if [[ ${CLOUDS_YAML_2XB64} != '' ]]; then
              echo "CLOUDS_YAML_2XB64 matches value";
              echo "$CLOUDS_YAML_2XB64"
          fi

      - name: Create a file and check
        shell: bash
        run: |
          # set -x

          # Secrets are now available as masked environment variable.
          if [[ "$CLOUDS_ENV_2XB64" != '' ]]; then
              clouds_env_b64="$CLOUDS_ENV_2XB64"
              echo "${clouds_env_b64}" | base64 -di | base64 -di > "${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl"
              cat "${GITHUB_WORKSPACE}/cloud-env.pkrvars.hcl" | egrep -v '(password|username|cloud_pass|cloud_user)'
          fi

          if [[ "$CLOUDS_YAML_2XB64" != '' ]]; then
              mkdir -p "$HOME/.config/openstack"
              clouds_yaml_b64="$CLOUDS_YAML_2XB64"
              echo "${clouds_yaml_b64}" | base64 -di | base64 -di > "$HOME/.config/openstack/clouds.yaml"
              cat "$HOME/.config/openstack/clouds.yaml" | egrep -v '(password|username|cloud_pass|cloud_user)'
          fi
